

@if (Sources != null)
{

<video controls
       data-poster="@Poster"
       @attributes="InputAttributes">

    <!-- Video files -->
    @if (Sources.Any())
    {
        foreach (var item in Sources)
        {
            //Console.WriteLine(item.Key + ":" + item.Value);
            //type = GetVideoType(item.Value);

            <source src="@item.Value"
                    type="video/mp4"
                    size="@item.Key" />
        }

    }
    @*else
    {
        <source src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4"
                type="video/mp4"
                size="576" />
    }*@

    <!-- Caption files -->
    @if (Captions != null)
    {
        if (Captions.Any())
        {
            foreach (var item in Captions)
            {
                <track kind="captions"
                       label="English"
                       srclang="en"
                       src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"
                       default />
            }
        }
        @*else
        {
            <track kind="captions"
                   label="English"
                   srclang="en"
                   src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"
                   default />
        }*@
    }



    <!-- Fallback for browsers that don't support the <video> element -->
    @if (!string.IsNullOrEmpty(DownloadLink))
    {
        <a href="@DownloadLink" download>دانلود</a>
    }

</video>
}

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }


    [Parameter]
    public string Poster { get; set; }

    [Parameter]
    public Dictionary<string, string> Sources { get; set; }

    [Parameter]
    public string DownloadLink { get; set; }

    [Parameter]
    public Dictionary<string, string> Captions { get; set; }

    /// <summary>
    /// captions,quality,speed,loop
    /// </summary>
    [Parameter]
    public string settings { get; set; } = "captions,quality,speed,loop";

    /// <summary>
    /// play-large,restart,rewind,play,fast-forward,progress,current-time,duration,mute,volume,captions,settings,pip,airplay,download,fullscreen
    /// </summary>
    [Parameter]
    public string controls { get; set; } = "play-large,restart,rewind,play,fast-forward,progress,current-time,duration,mute,volume,captions,settings,pip,airplay,download,fullscreen";

    [Parameter]
    public EventCallback OnEnded { get; set; }

    IJSObjectReference Plyr;
    IJSObjectReference Main;
    private string type;

    private string elementId;
    private DotNetObjectReference<VideoPlayer> objectRef;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            elementId = InputAttributes.FirstOrDefault(p => p.Key == "id").Value.ToString();
            objectRef = DotNetObjectReference.Create(this);
            await Task.Delay(1000).ContinueWith(async p =>
            {
                Plyr = await JSRuntime.InvokeAsync<IJSObjectReference>(
                           "import", "./_content/BlazorVideoPlayer/plyr.js");
            }).ContinueWith(async p =>
            {
                Main = await JSRuntime.InvokeAsync<IJSObjectReference>(
                          "import", "./_content/BlazorVideoPlayer/main.js");

                await Main.InvokeVoidAsync("load", settings, controls, elementId, objectRef).AsTask();
            });


        }
    }

    [JSInvokable]
    public async Task onEnded()
    {
        await OnEnded.InvokeAsync();
    }

    private string GetVideoType(string path)
    {
        var splitPath = path.Split('.');
        var Type = splitPath[splitPath.Length - 1];

        if (Type == "MP4" || Type == "mp4" || Type == "Mp4" || Type == "mP4")
        {
            return "video/mp4";
        }
        else if (Type == "webm" || Type == "WebM")
        {
            return "video/webm";
        }
        else if (Type == "Ogg" || Type == "ogg")
        {
            return "video/ogg";
        }

        return "video/mp4";
    }



}
