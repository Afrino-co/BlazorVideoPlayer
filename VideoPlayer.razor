


<video controls
       crossorigin
       playsinline
       data-poster="@Poster"
       id="player" class="js-player">
    <!-- Video files -->
    @if (Sources != null)
    {
        if (Sources.Any())
        {
            foreach (var item in Sources)
            {
                var type = GetVideoType(item.Value);
                <source src="@item.Value"
                        type="@type"
                        size="@item.Key" />
            }

        }
        else
        {
            <source src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4"
                    type="video/mp4"
                    size="576" />
        }
    }
    @*<source src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4"
                type="video/mp4"
                size="576" />
        <source src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4"
                type="video/mp4"
                size="720" />
        <source src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4"
                type="video/mp4"
                size="1080" />*@

    <!-- Caption files -->
    @if (Captions != null)
    {
        if (Captions.Any())
        {
            foreach (var item in Captions)
            {
                <track kind="captions"
                       label="English"
                       srclang="en"
                       src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"
                       default />
            }
        }
        else
        {
            <track kind="captions"
                   label="English"
                   srclang="en"
                   src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"
                   default />
        }
    }



    @*<track kind="captions"
               label="English"
               srclang="en"
               src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt"
               default />
        <track kind="captions"
               label="Français"
               srclang="fr"
               src="https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt" />*@

    <!-- Fallback for browsers that don't support the <video> element -->
    <a href="@DownloadLink" download>دانلود</a>
</video>


@code {
    [Parameter]
    public string Poster { get; set; } = "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg";

    [Parameter]
    public Dictionary<string, string> Sources { get; set; }

    [Parameter]
    public string DownloadLink { get; set; } = "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4";

    [Parameter]
    public Dictionary<string, string> Captions { get; set; }

    /// <summary>
    /// با کاما جدا کنید
    /// captions, quality, speed, loop
    /// </summary>
    [Parameter]
    public string settings { get; set; }

    /// <summary>
    /// با کاما جدا کنید
    /// play-large,restart,rewind, play,fast-forward,progress,current-time, duration,mute,volume,captions,settings,pip,airplay, download,fullscreen
    /// </summary>
    [Parameter]
    public string controls { get; set; }

    IJSObjectReference Plyr;
    IJSObjectReference Main;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine(settings);
            Console.WriteLine(controls);
            await Task.Delay(1000).ContinueWith(async p =>
            {
                Plyr = await JSRuntime.InvokeAsync<IJSObjectReference>(
                           "import", "./_content/BlazorVideoPlayer/plyr.js");
            }).ContinueWith(async p =>
            {
                Main = await JSRuntime.InvokeAsync<IJSObjectReference>(
                          "import", "./_content/BlazorVideoPlayer/main.js");

                await Main.InvokeVoidAsync("load", settings, controls).AsTask();
            });

        }
    }
    private string GetVideoType(string path)
    {
        var splitPath = path.Split('.');
        var Type = splitPath[splitPath.Length - 1];

        if (Type == "MP4" || Type == "mp4" || Type == "Mp4" || Type == "mP4")
        {
            return "video/mp4";
        }
        else if (Type == "webm" || Type == "WebM")
        {
            return "video/webm";
        }
        else if (Type == "Ogg" || Type == "ogg")
        {
            return "video/ogg";
        }

        return "video/mp4";
    }


}
